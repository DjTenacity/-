直译 控制反转，后来翻译为 依赖注入 DI dep
对象的实例化不再由自己来完成，而是由第三方的容器或者根据来注入


程序运行时有两个阶段：
1.编译时，生成代码准备阶段
2.运行时，使用代码来注入

黄油刀在编译的时候会花一些时间，因为它会自动生成一些内部类XXX$InjectAdapter ( java基础，$后面是内部类的名称 )


反射是要运行的时候访问字节码文件，运行的时候 jvm里面一定要可以加载class字节码文件才行

现在我们要的是编译的时候访问这个类的成员，而反射是木已成舟，这个类已经编译得到了最终的class字节码文件，所以反射是不行的。

譬如黄油刀   MainActivity里面的view对象,要在编译的时候注入进去,

RetentionPolicy.SOURCE 注解将被编译器丢弃 
          RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢弃 
          RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。